jobs: # A basic unit of work in a run
  setup:
    # directory where steps are run
    working_directory: ~/ackrep/ackrep_core
    docker: # run the steps with Docker
      # CircleCI Python images available at: https://hub.docker.com/r/circleci/python/
      - image: circleci/python:3.8
        # environment: # environment variables for primary container
    steps: # steps that comprise the `build` job
      - checkout # check out source code to working directory
      - restore_cache:
      # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          key: deps3--{{ checksum "requirements.txt" }}--
      - run:
          name: install graphviz
          command: |
            sudo apt-get install graphviz
      - run:
          name: Install Dependancies
          command: |
            python -m venv venv
            . venv/bin/activate
            pip install -U pip
            pip install -r requirements.txt
            pip show ipydex
            echo --- Install Ackrep
            pip install -e .
      - save_cache: # cache Python dependencies using checksum of requirements as the cache-key
          key: deps3--{{ checksum "requirements.txt" }}--
          paths:
            - "venv"
      - run:
          name: bootstrap Config
          command: |
            . venv/bin/activate
            cd ..
            ackrep --bootstrap-config
            cat /home/circleci/.config/ackrep/ackrepconf.toml
      - run:
          name: Load ERK Modules
          command: |
            . venv/bin/activate
            echo Cloning erk_data_for_unittests
            cd ~
            mkdir -p erk/erk_data_for_unittests
            cd erk/erk_data_for_unittests
            git clone https://github.com/ackrep-org/ocse.git
            ls /home
            ls /home/circleci
            ls /home/circleci/erk
            ls /home/circleci/erk/erk-data-for-unittests
            ackrep --checkout-corresponding-ocse-ut-repo
            cp -r ~/erk/erk_data_for_unittests ~/erk/erk_data
      - run:
          name: Load Test Data
          command: |
            cd ../
            git clone https://github.com/ackrep-org/ackrep_data.git
            mv ackrep_data ackrep_data_for_unittests
            cd ackrep_data_for_unittests
            git checkout for_unittests
      - run:
          name: Load Test Results
          command: |
            cd ../
            git clone https://github.com/ackrep-org/ackrep_ci_results.git
            mv ackrep_ci_results ackrep_ci_results_for_unittests
            cd ackrep_ci_results_for_unittests
            git checkout for_unittests
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true
      - run:
          name: Setup Containers
          command: |
            . venv/bin/activate
            ackrep --bootstrap-db
            ackrep -l ../ackrep_data_for_unittests
            echo Pulling environment images
            ackrep --pull-and-show-envs
            docker image prune -f
            docker images
            echo Create dummy container
            docker create -v /code/ackrep_data_for_unittests --name dummy alpine:3.4 /bin/true
            echo Copy ackrep_data to dummy
            docker cp /home/circleci/ackrep/ackrep_data_for_unittests dummy:/code
            echo containers:
            docker container ps
      - run:
          name: Test Core
          command: |
            ls
            . venv/bin/activate
            python manage.py makemigrations
            ackrep --bootstrap-test-db
            python manage.py test -v 2 --keepdb ackrep_core.test.test_core
      - run:
          name: Test Web
          command: |
            . venv/bin/activate
            python manage.py test -v 2 --keepdb ackrep_web.test.test_web
      - run:
          name: Debug
          when: on_fail
          command: |
            echo containers:
            docker container ps
            echo artifacts folder:
            ls ../artifacts
            echo ci_results folder:
            ls ../artifacts/ackrep_ci_results
            echo history folder:
            ls ../artifacts/ackrep_ci_results/history
            yaml=$(ls ../artifacts/ackrep_ci_results/history)
            echo yaml:
            cat ../artifacts/ackrep_ci_results/history/$yaml
            echo plots folder:
            ls ../artifacts/ackrep_plots

workflows:
  version: 2
  build_and_test:
    jobs:
      - setup

