{# This file is the template for what will become an executed python script.#}

# {{context.warning}}

# prevent debugging scripts from unwanted interference
import os
os.environ["NO_IPS_EXCEPTHOOK"] = "True"

import sys

# ackrep_core path
sys.path.insert(0, r"{{context.ackrep_core_path}}")

import ackrep_core

from ipydex import IPS

# method packages
{% for package in context.method_package_list %}
sys.path.insert(0, r"{{package}}")
{% endfor %}

# the ProblemSpecification Entity
sys.path.insert(0, r"{{context.problem_spec_path}}")

# the ProblemSolution Entity
sys.path.insert(0, r"{{context.solution_path}}")

# uncomment for debugging
# from ipydex import IPS, activate_ips_on_exception, TracerFactory
# activate_ips_on_exception()
# os.environ.pop("NO_IPS_EXCEPTHOOK", None)
# activate_trace = TracerFactory()
# activate_trace()

# IPS()

# these statements assume standard filenames (`problem.py` and `solution.py`)

import problem as ps
import solution

# perform the solution
solution_data = solution.solve(ps.ProblemSpecification)

# evaluate the solution (-> ResultContainer)
rc = ps.evaluate_solution(solution_data)

if not rc.success:
    print(rc.success)

if rc.success:
    # returncode 0 means: no errors (general convention)
    exit(0)
else:
    # returncode 2 means: numerically wrong result (our convention)
    print("\nNumerical calculation finished with unexpected result!\n")
    exit(2)
